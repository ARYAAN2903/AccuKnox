import { createSlice } from '@reduxjs/toolkit';

// Create a slice of the Redux store for managing widgets and categories
const widgetsSlice = createSlice({
  name: 'widgets', // The name of the slice
  initialState: {
    categories: [], // Initial state containing an empty array of categories
  },
  reducers: {
    // Reducer to set the categories in the state
    setCategories: (state, action) => {
      state.categories = action.payload; // Replace the current categories with the provided ones
    },

    // Reducer to add a widget to a specific category
    addWidget: (state, action) => {
      const { categoryId, widget } = action.payload; // Extract categoryId and widget from the action payload
      const category = state.categories.find(cat => cat.id === categoryId); // Find the category with the matching ID

      if (category) {
        // Ensure widget is a valid object with the correct properties
        if (typeof widget === 'object' && widget !== null && widget.name && widget.text) {
          // Assign a unique ID to the new widget based on the number of existing widgets
          widget.id = category.widgets.length + 1;
          category.widgets.push(widget); // Add the new widget to the category's widgets array
        } else {
          console.error('Invalid widget format:', widget); // Log an error if the widget format is invalid
        }
      }
    },

    // Reducer to remove a widget from a specific category
    removeWidget: (state, action) => {
      const { categoryId, widgetId } = action.payload; // Extract categoryId and widgetId from the action payload
      const category = state.categories.find(cat => cat.id === categoryId); // Find the category with the matching ID

      if (category) {
        // Filter out the widget with the matching ID from the category's widgets array
        category.widgets = category.widgets.filter(widget => widget.id !== widgetId);
      }
    },

    // Reducer to update an existing widget in a specific category
    updateWidget: (state, action) => {
      const { categoryId, widgetId, updatedWidget } = action.payload; // Extract categoryId, widgetId, and updatedWidget from the action payload
      const category = state.categories.find(cat => cat.id === categoryId); // Find the category with the matching ID

      if (category) {
        // Find the index of the widget with the matching ID in the category's widgets array
        const widgetIndex = category.widgets.findIndex(widget => widget.id === widgetId);

        if (widgetIndex !== -1) {
          // Update the widget with the new properties while keeping the existing ones intact
          category.widgets[widgetIndex] = { ...category.widgets[widgetIndex], ...updatedWidget };
        }
      }
    },
  },
});

// Export the action creators generated by the slice
export const { setCategories, addWidget, removeWidget, updateWidget } = widgetsSlice.actions;

// Export the reducer to be used in the Redux store
export default widgetsSlice.reducer;
