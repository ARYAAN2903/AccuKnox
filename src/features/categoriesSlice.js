import { createSlice } from '@reduxjs/toolkit';

// Initial state for the categories slice, which includes an empty array of categories
const initialState = {
  categories: []
};

// Create a slice of the Redux store specifically for managing categories and widgets within them
const categoriesSlice = createSlice({
  name: 'categories', // The name of the slice
  initialState, // The initial state defined above
  reducers: {
    // Reducer to set the categories in the state
    setCategories: (state, action) => {
      state.categories = action.payload; // Replace the current categories array with the provided data
    },

    // Reducer to add a widget to a specific category
    addWidget: (state, action) => {
      const { categoryId, widget } = action.payload; // Extract categoryId and widget from the action payload
      const category = state.categories.find(cat => cat.id === categoryId); // Find the category that matches the provided categoryId

      if (category) {
        // If the category is found, add the widget to the category's widgets array
        // The widget is given a unique ID using Date.now(), which generates a timestamp
        category.widgets.push({ ...widget, id: Date.now() });
      }
    },

    // Reducer to remove a widget from a specific category
    removeWidget: (state, action) => {
      const { categoryId, widgetId } = action.payload; // Extract categoryId and widgetId from the action payload
      const category = state.categories.find(cat => cat.id === categoryId); // Find the category that matches the provided categoryId

      if (category) {
        // If the category is found, filter out the widget with the matching ID from the category's widgets array
        category.widgets = category.widgets.filter(widget => widget.id !== widgetId);
      }
    },

    // Reducer to update an existing widget in a specific category
    updateWidget: (state, action) => {
      const { categoryId, widgetId, updatedWidget } = action.payload; // Extract categoryId, widgetId, and updatedWidget from the action payload
      const category = state.categories.find(cat => cat.id === categoryId); // Find the category that matches the provided categoryId

      if (category) {
        // If the category is found, locate the widget within that category's widgets array
        const widgetIndex = category.widgets.findIndex(widget => widget.id === widgetId);

        if (widgetIndex !== -1) {
          // If the widget is found, update it with the new properties while retaining the existing ones
          category.widgets[widgetIndex] = { ...category.widgets[widgetIndex], ...updatedWidget };
        }
      }
    }
  }
});

// Export the action creators generated by the slice
export const { setCategories, addWidget, removeWidget, updateWidget } = categoriesSlice.actions;

// Export the reducer to be used in the Redux store
export default categoriesSlice.reducer;
